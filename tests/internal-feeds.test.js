/**
 * @fileoverview Test suite for Internal Feeds API endpoints
 * @description Comprehensive tests for the internal content ingestion API
 * including authentication, validation, error handling, and functionality
 * @author Easha from OK AI team
 * @version 1.2.0
 * @since 1.2.0
 */

const request = require('supertest');
const app = require('../app');

/**
 * @description Test suite for Internal Feeds API
 * Tests the POST /api/internal/feeds endpoint used by external scripts
 * to ingest news content into the system
 */
describe('Internal Feeds API', () => {
  
  // Test constants
  const VALID_TOKEN = process.env.INTERNAL_API_TOKEN || 'your-secret-token-here';
  const INVALID_TOKEN = 'invalid-token-123';
  
  const VALID_FEED_DATA = {
    title: 'Test Celebrity News',
    summary: 'This is a test summary of celebrity news generated by AI.',
    category: 'Celebrities',
    url: 'https://tmz.com/test-article'
  };

  /**
   * @description Authentication Tests
   * Tests various authentication scenarios for the internal API
   */
  describe('Authentication', () => {
    
    /**
     * @description Test missing authorization header
     */
    test('should reject request without authorization header', async () => {
      const response = await request(app)
        .post('/api/internal/feeds')
        .send(VALID_FEED_DATA);
      
      expect(response.status).toBe(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Missing or invalid authorization header');
    });

    /**
     * @description Test invalid authorization header format
     */
    test('should reject request with invalid auth header format', async () => {
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', 'InvalidFormat token123')
        .send(VALID_FEED_DATA);
      
      expect(response.status).toBe(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Missing or invalid authorization header');
    });

    /**
     * @description Test invalid token
     */
    test('should reject request with invalid token', async () => {
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${INVALID_TOKEN}`)
        .send(VALID_FEED_DATA);
      
      expect(response.status).toBe(403);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Invalid authentication token');
    });

    /**
     * @description Test valid token
     */
    test('should accept request with valid token', async () => {
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(VALID_FEED_DATA);
      
      // Should not be authentication error (401 or 403)
      expect(response.status).not.toBe(401);
      expect(response.status).not.toBe(403);
    });
  });

  /**
   * @description Input Validation Tests
   * Tests various input validation scenarios
   */
  describe('Input Validation', () => {
    
    /**
     * @description Test missing required fields
     */
    test('should reject request with missing title', async () => {
      const invalidData = { ...VALID_FEED_DATA };
      delete invalidData.title;
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(invalidData);
      
      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Missing required fields');
      expect(response.body.required).toContain('title');
    });

    /**
     * @description Test missing summary field
     */
    test('should reject request with missing summary', async () => {
      const invalidData = { ...VALID_FEED_DATA };
      delete invalidData.summary;
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(invalidData);
      
      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Missing required fields');
      expect(response.body.required).toContain('summary');
    });

    /**
     * @description Test missing category field
     */
    test('should reject request with missing category', async () => {
      const invalidData = { ...VALID_FEED_DATA };
      delete invalidData.category;
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(invalidData);
      
      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Missing required fields');
      expect(response.body.required).toContain('category');
    });

    /**
     * @description Test missing URL field
     */
    test('should reject request with missing url', async () => {
      const invalidData = { ...VALID_FEED_DATA };
      delete invalidData.url;
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(invalidData);
      
      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Missing required fields');
      expect(response.body.required).toContain('url');
    });

    /**
     * @description Test title length validation
     */
    test('should reject request with title too long', async () => {
      const invalidData = {
        ...VALID_FEED_DATA,
        title: 'A'.repeat(501) // 501 characters, over the 500 limit
      };
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(invalidData);
      
      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Title too long');
      expect(response.body.length).toBe(501);
    });

    /**
     * @description Test summary length validation
     */
    test('should reject request with summary too long', async () => {
      const invalidData = {
        ...VALID_FEED_DATA,
        summary: 'A'.repeat(10001) // 10001 characters, over the 10000 limit
      };
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(invalidData);
      
      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Summary too long');
      expect(response.body.length).toBe(10001);
    });

    /**
     * @description Test empty string fields
     */
    test('should reject request with empty string fields', async () => {
      const invalidData = {
        title: '',
        summary: '',
        category: '',
        url: ''
      };
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(invalidData);
      
      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Missing required fields');
    });
  });

  /**
   * @description Successful Creation Tests
   * Tests successful feed creation scenarios
   */
  describe('Successful Feed Creation', () => {
    
    /**
     * @description Test successful feed creation with valid data
     */
    test('should create feed with valid data', async () => {
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(VALID_FEED_DATA);
      
      expect(response.status).toBe(201);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Feed created successfully');
      expect(response.body.data).toHaveProperty('feedId');
      expect(response.body.data).toHaveProperty('title', VALID_FEED_DATA.title);
      expect(response.body.data).toHaveProperty('source', 'tmz.com');
      expect(response.body.data).toHaveProperty('timestamp');
      
      // Validate timestamp format
      const timestamp = new Date(response.body.data.timestamp);
      expect(timestamp.getTime()).not.toBeNaN();
    });

    /**
     * @description Test domain extraction from different URLs
     */
    test('should extract correct domain from various URLs', async () => {
      const testCases = [
        { url: 'https://www.cnn.com/article', expectedSource: 'cnn.com' },
        { url: 'http://espn.com/sports/news', expectedSource: 'espn.com' },
        { url: 'https://bbc.co.uk/news/world', expectedSource: 'bbc.co.uk' },
        { url: 'https://techcrunch.com/startup-news', expectedSource: 'techcrunch.com' }
      ];

      for (const testCase of testCases) {
        const testData = { ...VALID_FEED_DATA, url: testCase.url };
        
        const response = await request(app)
          .post('/api/internal/feeds')
          .set('Authorization', `Bearer ${VALID_TOKEN}`)
          .send(testData);
        
        expect(response.status).toBe(201);
        expect(response.body.data.source).toBe(testCase.expectedSource);
      }
    });

    /**
     * @description Test handling of invalid URLs
     */
    test('should handle invalid URLs gracefully', async () => {
      const testData = { ...VALID_FEED_DATA, url: 'not-a-valid-url' };
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(testData);
      
      expect(response.status).toBe(201);
      expect(response.body.data.source).toBe('unknown-source');
    });

    /**
     * @description Test trimming of whitespace in fields
     */
    test('should trim whitespace from input fields', async () => {
      const dataWithWhitespace = {
        title: '  Celebrity News with Spaces  ',
        summary: '  Summary with leading and trailing spaces  ',
        category: '  Celebrities  ',
        url: '  https://tmz.com/article  '
      };
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(dataWithWhitespace);
      
      expect(response.status).toBe(201);
      expect(response.body.data.title).toBe('Celebrity News with Spaces');
    });
  });

  /**
   * @description Performance Tests
   * Tests API performance and response times
   */
  describe('Performance', () => {
    
    /**
     * @description Test API response time
     */
    test('should respond within reasonable time', async () => {
      const startTime = Date.now();
      
      const response = await request(app)
        .post('/api/internal/feeds')
        .set('Authorization', `Bearer ${VALID_TOKEN}`)
        .send(VALID_FEED_DATA);
      
      const responseTime = Date.now() - startTime;
      
      expect(response.status).toBe(201);
      expect(responseTime).toBeLessThan(1000); // Should respond within 1 second
    });

    /**
     * @description Test handling multiple concurrent requests
     */
    test('should handle concurrent requests', async () => {
      const promises = [];
      
      for (let i = 0; i < 5; i++) {
        const testData = {
          ...VALID_FEED_DATA,
          title: `Concurrent Test ${i + 1}`,
          url: `https://test${i + 1}.com/article`
        };
        
        promises.push(
          request(app)
            .post('/api/internal/feeds')
            .set('Authorization', `Bearer ${VALID_TOKEN}`)
            .send(testData)
        );
      }
      
      const responses = await Promise.all(promises);
      
      responses.forEach((response, index) => {
        expect(response.status).toBe(201);
        expect(response.body.success).toBe(true);
        expect(response.body.data.title).toBe(`Concurrent Test ${index + 1}`);
      });
    });
  });

  /**
   * @description Cleanup after all tests
   * Logs test completion summary
   */
  afterAll(() => {
    console.log('✅ Internal Feeds API tests completed successfully');
  });
}); 